#!/usr/bin/env ruby

$: << File.expand_path('../../lib/', __FILE__)

require 'rubygems'
require 'nzb'
require 'optparse'

nzb_options = { :blocking => true }
ui_options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} --server news.example.com --output-directory /path/to/output [options] file1.nzb file2.nzb ..."
  
  opts.on('-s', '--server [HOST]', 'The news server to connect to') do |host|
    nzb_options[:host] = host
  end
  
  opts.on('-p', '--port [PORT]', Numeric, 'The port on which to connect to the news server') do |port|
    nzb_options[:port] = port
  end
  
  opts.on('-t', '--threads [SIZE]', Numeric, 'The number of simultaneous connections to make to the news server') do |pool_size|
    nzb_options[:pool_size] = pool_size
  end
  
  opts.on('-o', '--output-directory [PATH]', 'The directory where the downloads should be stored') do |output_directory|
    nzb_options[:output_directory] = output_directory
  end
  
  opts.on('-c', '--disable-curses', 'Disable the usage of Curses and simply prints a line for each status update') do |disable_curses|
    ui_options[:disable_curses] = disable_curses
  end
  
  opts.on('-l', '--log-file [PATH]', 'Path to where the log should be written') do |log_file|
    ui_options[:log_file] = log_file
  end
  
  opts.on('-L', '--log-level [LEVEL]', Numeric, 'Sets the log level, ranging from 0 (debug) to 4 (fatal)') do |log_level|
    ui_options[:log_level] = log_level
  end
end
parser.parse!

def log_message(nzb, message)
  "[#{File.basename(nzb.path)} (#{Time.now.strftime('%H:%M:%S')})]: #{message}"
end

begin
  raise LoadError if ui_options[:disable_curses]
  
  require 'curses'
  require 'set'
  
  # A log method which uses Curses
  def log(nzb, message)
    @screen ||= Curses.init_screen
    (@nzbs_on_screen ||= SortedSet.new) << nzb
    
    @nzbs_on_screen.each_with_index do |nzb_on_screen, index|
      if nzb_on_screen == nzb
        @screen.setpos(index, 0)
        @screen.addstr(log_message(nzb, message))
        Curses.refresh
      end
    end
  end
rescue LoadError
  # A log method which simply prints if Curses is unavailable.
  # Which is on windows if I understood correctly.
  def log(nzb, message)
    puts log_message(nzb, message)
  end
end

if nzb_options[:host] and nzb_options[:output_directory] and !ARGV.empty?
  NZB.logger = Logger.new(ui_options[:log_file]) if ui_options[:log_file]
  NZB.logger.level = ui_options[:log_level] if ui_options[:log_level]
  
  NZB.setup(nzb_options)
  
  ARGV.each do |nzb_file|
    NZB.queue(nzb_file).on_update do |nzb|
      log(nzb, "#{ '%0.2f' % nzb.downloaded_percentage }%")
    end
  end
  NZB::Connection.start_pool!
else
  # Print banner
  puts parser
end